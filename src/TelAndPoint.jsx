import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

function TelAndPointForm() {
    const [phoneNum, setPhoneNum] = useState('');
    const [points, setPoints] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå
    const [error, setError] = useState(null);
    const [history, setHistory] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
    const [warning, setWarning] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°
    const [selectedPoints, setSelectedPoints] = useState(null); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å
    const navigate = useNavigate();

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πâ‡∏°
    const handleCheckPoints = () => {
        const phoneRegex = /^[0]{1}[6-9]{1}[0-9]{8}$/; 
        if (!phoneRegex.test(phoneNum)) {
            setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 25 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if (history[phoneNum]) {
            setPoints(prevPoints => ({
                ...prevPoints,
                [phoneNum]: (prevPoints[phoneNum] || 0) + 25
            }));

            setHistory(prevHistory => ({
                ...prevHistory,
                [phoneNum]: [...prevHistory[phoneNum], 'Transaction']
            }));
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
            setPoints(prevPoints => ({
                ...prevPoints,
                [phoneNum]: (prevPoints[phoneNum] || 0) + 25
            }));

            setHistory(prevHistory => ({
                ...prevHistory,
                [phoneNum]: ['Transaction']
            }));
        }

        setError(null);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°
    const handleRedeemPoints = () => {
        const userPoints = points[phoneNum] || 0;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (selectedPoints === null) {
            setWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å");
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (userPoints >= selectedPoints) {
            setWarning(null); // Clear the warning if points are enough
            // ‡∏´‡∏±‡∏Å‡πÅ‡∏ï‡πâ‡∏°
            setPoints(prevPoints => ({
                ...prevPoints,
                [phoneNum]: prevPoints[phoneNum] - selectedPoints
            }));
            alert(`‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏±‡∏Å ${selectedPoints} pt`);
        } else {
            setWarning(`‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${selectedPoints} pt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏Å‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á`);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    const handleGoHome = () => {
        navigate('/');
    };

    return (
        <div className="TelAndPointForm" style={{ padding: '20px', fontFamily: 'Inter', textAlign: 'center' }}>
            <div style={{ position: 'relative', width: '100%', height: '80px' }}>
                <img 
                    data-layer="2e6ba818-1ede-47fd-b5d7-e44bd63e8edb1" 
                    className="E6ba8181ede47fdB5d7E44bd63e8edb1" 
                    src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ8h3UOd_zOHWf7Va30j-d8vZ-5X99MpvT7UA&s" 
                    alt="Logo" 
                    style={{ 
                        width: '27px', 
                        height: '27px', 
                        position: 'absolute', 
                        top: '10px', 
                        left: '95px', 
                        borderRadius: '100%' 
                    }} 
                />

                <div 
                    data-layer="KumKom" 
                    className="Kumkom" 
                    style={{ 
                        color: 'black', 
                        fontSize: '16px', 
                        fontFamily: 'Figma Hand', 
                        position: 'absolute', 
                        top: '15px', 
                        left: '22px', 
                        fontWeight: '700', 
                        wordWrap: 'break-word' 
                    }}
                >
                    KumKom
                </div>

                <div 
                    data-layer="AxeAxe" 
                    className="Axeaxe" 
                    style={{ 
                        color: '#1A1A4C', 
                        fontSize: '16px', 
                        fontFamily: 'Figma Hand', 
                        position: 'absolute', 
                        top: '35px', 
                        left: '59px', 
                        fontWeight: '700', 
                        wordWrap: 'break-word' 
                    }}
                >
                    AxeAxe
                </div>

                <div 
                    data-layer="Rectangle 13" 
                    className="Rectangle13" 
                    style={{ 
                        width: '100%', 
                        height: '6px', 
                        position: 'absolute', 
                        top: '67px', 
                        left: '0', 
                        background: '#1A1A4C' 
                    }} 
                />
            </div>

            <div 
                data-layer="‡πÅ‡∏Ñ‡πà‡πÄ‡∏ò‡∏≠‡πÄ‡∏õ‡∏¥‡∏î(‡∏ß‡∏≤‡∏£‡πå‡∏õ)‡πÇ‡∏•‡∏Å‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô" 
                style={{ 
                    textAlign: 'center', 
                    color: '#FF0707', 
                    fontSize: '14px', 
                    fontFamily: 'Roboto Mono', 
                    position: 'absolute', 
                    top: '120px', 
                    left: '50%', 
                    transform: 'translateX(-50%)', 
                    fontWeight: '400', 
                    wordWrap: 'break-word', 
                    textShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)' 
                }}
            >
                ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ò‡∏≠‡πÄ‡∏õ‡∏¥‡∏î (‡∏ß‡∏≤‡∏£‡πå‡∏õ) ‡πÇ‡∏•‡∏Å‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            </div>

            <div style={{ textAlign: 'left', marginLeft: '20px', marginTop: '40px' }}>
                <p><b>üéÅ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô :</b></p>
                <ul>
                    <li>‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏£‡∏ö <b>75 pt</b> ‡πÅ‡∏•‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° 50%</li>
                    <li>‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏£‡∏ö <b>100 pt</b> ‡πÅ‡∏•‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ü‡∏£‡∏µ</li>
                    <li>‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏° <b>25 pt/‡∏Ñ‡∏£‡∏±‡πâ‡∏á</b> ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</li>
                </ul>
            </div>

            <img 
                src="https://t3.ftcdn.net/jpg/05/79/34/92/360_F_579349293_XUTidUs5U3tZShFUNz5W5w7CKInHIJtg.jpg" 
                alt="drinks" 
                style={{ width: '100%', marginTop: '20px', borderRadius: '10px' }} 
            />

            <div style={{ textAlign: 'left', marginLeft: '20px', marginTop: '20px' }}>
                <label><b>üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</b></label>
                <input 
                    type="tel" 
                    value={phoneNum} 
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                    onChange={(e) => setPhoneNum(e.target.value)} 
                    style={{ width: '90%', padding: '8px', margin: '10px 0', borderRadius: '5px' }}
                />

                <button 
                    onClick={handleCheckPoints} 
                    style={{ 
                        background: '#FFA500', 
                        padding: '10px', 
                        border: 'none', 
                        borderRadius: '5px', 
                        cursor: 'pointer', 
                        width: '90%', 
                        marginTop: '10px' 
                    }}
                >
                    üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πâ‡∏°
                </button>

                {error && (
                    <p style={{ color: 'red', marginTop: '10px' }}>‚ùå {error}</p>
                )}

                <div style={{ marginTop: '20px' }}>
                    <label><b>üéØ ‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</b></label>
                    <input 
                        type="text" 
                        value={points[phoneNum] || 0} 
                        readOnly 
                        style={{ 
                            width: '90%', 
                            padding: '8px', 
                            margin: '10px 0', 
                            backgroundColor: '#f0f0f0', 
                            borderRadius: '5px' 
                        }} 
                    />
                </div>
            </div>

            <div style={{ marginTop: '20px' }}>
                <label><b>üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å:</b></label>
                <select 
                    value={selectedPoints} 
                    onChange={(e) => setSelectedPoints(Number(e.target.value))} 
                    style={{ width: '90%', padding: '8px', margin: '10px 0', borderRadius: '5px' }}
                >
                    <option value={null}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å</option>
                    <option value={75}>75 pt (‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏•‡∏î 50%)</option>
                    <option value={100}>100 pt (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ü‡∏£‡∏µ)</option>
                </select>
            </div>

            {warning && (
                <p style={{ color: 'red', marginTop: '10px' }}>‚ö†Ô∏è {warning}</p>
            )}

            <div style={{ marginTop: '20px' }}>
                <button 
                    onClick={handleRedeemPoints}
                    style={{ 
                        background: '#FF70A6', 
                        padding: '10px 20px', 
                        border: 'none', 
                        borderRadius: '5px', 
                        margin: '5px', 
                        cursor: 'pointer' 
                    }}
                >
                    üéü ‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°
                </button>
                
                <button 
                    onClick={handleGoHome} 
                    style={{ 
                        background: '#74E291', 
                        padding: '10px 20px', 
                        border: 'none', 
                        borderRadius: '5px', 
                        margin: '5px', 
                        cursor: 'pointer' 
                    }}
                >
                    üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
            </div>

            <div style={{ marginTop: '20px', textAlign: 'left', paddingLeft: '20px' }}>
                <h4>üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°:</h4>
                <ul>
                    {Object.keys(points).map(phone => (
                        <li key={phone}>
                            {phone} - {points[phone]} pt
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
}

export default TelAndPointForm;
